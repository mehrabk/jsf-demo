JSF facelets templating:
    Templating is the ability to reuse portion of your layout in order to follow the DRY (Don’t Repeat Yourself) principle.
    This allows you to easily structure your web page into multiple reusable components.
    Templating also helps in maintaining a standard look and feel in an application with a large number of pages.
    JavaServer faces technology provides the tools to implement user interfaces that are easy to extend and reuse.

ELResolver:
    - We can extend the ELResolver class to create our own implicit variables in JSF
    1- Create a class that extends from the ELResolver.
    2- Implement the required abstract methods.
    3- Register your custom El resolver with the faces-config.xml.

    - By extending the ElResolver class you need to implement 6 methods:
        - getValue: this method returns a value if the base is null and the property requested is named beers.
        - getType: this method identifies the type for our property. Determines wheter the call of the setValue method is safe without causing a ClassCastException to be thrown.
        - setValue: this method tries to set the value for a given property and base. If the variable is readonly you’ll need to throw a PropertyNotWritableException.
        - isReadOnly: determines wheter a variable is readonly.
        - getFeatureDescriptors: this method is used by a design time tool. It returns a set of information about the variables or properties that can be resolved.
        - getCommonPropertyType: returns the most general type that this resolver accepts.

JSF Bookmarkable View Parameters:
    - These are implemented by the UIViewParameter class that extends UIInput.
    - View parameters can be included in links by using the includeVidwParams=”true”.
    - JSF gets the request parameter’s values by name from the page URL and applies optional specified converters/validators. After conversion/validation succeeds and before the view is rendered, JSF binds the values of the request parameters to the managed bean properties by calling the appropriate setter methods.
    - attributes such as required and requiredMessage. When you need to ensure the url must contain certain attributes and the application flow is correct you can inform the user with the appropriate message, by using the <h:messages>.

Bookmarkable POST redirect GET Managed Bean:
    - This managed bean has a method toUpper() which simply gets the input parameters from a page and converts that string to upper case. Afterwards it tell’s JSF to make a redirect and include all the view parameters in the URL.
    We can pass the attributes in two ways:
        - Passing to another page: when we map the action attribute of the commandbutton we can tell JSF to do a redirect by specifying the faces-redirect parameter to true and include the view parameters by setting the includeViewParameters to true.
        - Passing to a managed bean: we can also pass the action to a managed bean and let the managed bean handle the navigation.


Calling an action on GET Request using JSF viewAction:
    - The JSF viewAction allows us to execute a method on GET request of a page. This action has the ability to implicitly navigate to another page.


Creating Lists and Maps as Managed Beans in JSF:
    -  that the sample configuration uses ‘none’ as the scope for the bean. This is because the managed bean is created per request and will not be stored anywhere in any scope.


@ManagedBean:
    - The @ManagedBean marks a bean to be managed by JSF
    - By default if no name attribute is specified it’ll use the fully qualified class name with the first letter in lower case
    - The bean will be created with lazy initialization which means that the bean will be created only when it’s requested
    - You can change this by specifying a eager attribute which will eagerly create the managed bean.

@PostConstruct:
    - execute a initialization method before the page is loaded in JSF
    - View parameters are not yet available in the @PostConstruct phase
    - JSF PreRenderView tackles this problem, you can address this problem by attaching the preRenderView event listener where you can do some custom initialization.
    - When working with view parameters, these are not yet available in the @PostConstruct phase. You can resolve this by adding a custom initialization listener method.

@ManagedProperty:
    - used for dependency injection, We can Inject a managed property into another managed bean.
    - You cannot inject a CDI managed bean into a JSF managed bean.
    - You cannot inject a JSF managed bean which scope is minor then the injecting bean. (with CDI you can).
    - The setter method is important here. This setter method is used by the @ManagedProperty to inject the managed bean